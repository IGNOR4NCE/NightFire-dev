.TH "PNCP" 3 "Tue May 9 2017" "Version 0.1" "Arduino-PNCP" \" -*- nroff -*-
.ad l
.nh
.SH NAME
PNCP
.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBFRAME\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBPNCP\fP (uint8_t GADD, uint32_t UADD)"
.br
.RI "intialize the library "
.ti -1c
.RI "void \fBbegin\fP (long baud, size_t port=0, uint8_t RE_pin_def=2, uint8_t DE_pin_def=3)"
.br
.RI "Used to setup the rs-485 chip\&. "
.ti -1c
.RI "void \fBupdate\fP ()"
.br
.RI "Collects and decodes packets\&. "
.ti -1c
.RI "bool \fBavailable\fP ()"
.br
.RI "Used to check available packets\&. "
.ti -1c
.RI "uint8_t \fBsetGADD\fP (uint8_t GADD)"
.br
.RI "Set group address\&. "
.ti -1c
.RI "uint8_t \fBgetGADD\fP ()"
.br
.RI "Get group address\&. "
.ti -1c
.RI "uint32_t \fBgetUADD\fP ()"
.br
.RI "Get current UADD\&. "
.ti -1c
.RI "uint8_t \fBgetHeader\fP ()"
.br
.RI "Get current header\&. "
.ti -1c
.RI "void \fBsetCallback\fP (void(*errorCallback)(byte PHY_error_status))"
.br
.ti -1c
.RI "bool \fBwrite\fP (uint8_t *PLD, uint8_t size)"
.br
.RI "Used to send packets\&. "
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "struct \fBPNCP::FRAME\fP \fBframe\fP"
.br
.in -1c
.SH "Constructor & Destructor Documentation"
.PP 
.SS "PNCP::PNCP (uint8_t GADD, uint32_t UADD)"

.PP
intialize the library This is used to intialize your devices addresses\&.
.PP
\fBParameters:\fP
.RS 4
\fIGADD\fP is the group address of the device\&. 
.br
\fIUADD\fP is the Unique address of the device\&. 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBsetGADD()\fP 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "bool PNCP::available ()"

.PP
Used to check available packets\&. This should be called frequently to beable to use received packets\&. 
.PP
.nf
  if(pncp\&.available){
  //Do stuff with the payload\&.
}

.fi
.PP
 
.PP
\fBReturns:\fP
.RS 4
True if the packet is for us and CRC is correct\&. 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBupdate()\fP 
.RE
.PP

.SS "void PNCP::begin (long baud, size_t port = \fC0\fP, uint8_t RE_pin_def = \fC2\fP, uint8_t DE_pin_def = \fC3\fP)"

.PP
Used to setup the rs-485 chip\&. This only needs to be called during setup() 
.PP
\fBParameters:\fP
.RS 4
\fIbaud\fP Baud rate for UART\&. 
.br
\fIport\fP Hardware serial port\&. Defined 0-4 
.br
\fIRE_pin_def\fP Recieve enable pin used for the rs-485 chip\&. 
.br
\fIDE_pin_def\fP Data enable pin used for the rs-485 chip\&. 
.RE
.PP

.SS "uint8_t PNCP::getGADD ()"

.PP
Get group address\&. This is used to get the currently set Group address 
.PP
.nf
int temp = getGADD();

.fi
.PP
 
.PP
\fBReturns:\fP
.RS 4
The current group address\&. 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBsetGADD()\fP 
.RE
.PP

.SS "uint8_t PNCP::getHeader ()"

.PP
Get current header\&. This is used to get the current header 
.PP
.nf
if(pncp\&.available())
{
int temp = pncp\&.getHeader();
//do stuff with the header\&.
}

.fi
.PP
 
.PP
\fBReturns:\fP
.RS 4
The current header\&. 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBavailable()\fP 
.RE
.PP

.SS "uint32_t PNCP::getUADD ()"

.PP
Get current UADD\&. This is used to get the current header 
.PP
.nf
int temp = pncp\&.getUADD();

}

.fi
.PP
 
.PP
\fBReturns:\fP
.RS 4
The devices UADD\&. 
.RE
.PP

.SS "uint8_t PNCP::setGADD (uint8_t GADD)"

.PP
Set group address\&. This can be called to change the group address of the device 
.PP
.nf
int temp = setGADD(10);
if(temp == 10){
//we changed the GADD
}

.fi
.PP
 
.PP
\fBParameters:\fP
.RS 4
\fIGADD\fP new group address\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The new group address\&. 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBPNCP()\fP, \fBgetGADD()\fP 
.RE
.PP

.SS "void PNCP::update ()"

.PP
Collects and decodes packets\&. This should be called frequently so that packets are read and decoded\&. 
.PP
.nf
  void loop()
  {
  //called every time the main loop starts
  pncp\&.update();
}

.fi
.PP
.PP
\fBSee also:\fP
.RS 4
\fBavailable()\fP 
.RE
.PP

.SS "bool PNCP::write (uint8_t * PLD, uint8_t size)"

.PP
Used to send packets\&. all this function when writing a packet back to the master\&.
.PP
\fBAttention:\fP
.RS 4
Slave modules should not send packets unless asked to\&. 
.RE
.PP
\fBParameters:\fP
.RS 4
\fI*PLD\fP should be a 8bit array of data based on the \fBPNCP\fP application layer 
.br
\fIsize\fP this is the size of the array being sent 
.RE
.PP
\fBReturns:\fP
.RS 4
True if the packet was sent correctly\&. 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for Arduino-PNCP from the source code\&.
